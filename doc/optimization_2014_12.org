This is a log file of sorts chronicaling what I did to diagnose &
improve performance in December, 2014.

* optimization

inspired by http://insideclojure.org/2014/12/15/warn-on-boxed/

* disassembling initial thoughts

#+begin_src bash
(defn vmuls
  "3d vector times scalar"
  ^doubles [^doubles [x y z] ^double s]
  [(* x s) (* y s) (* z s)])

(require '[no.disassemble :refer (disassemble)])

(println
  (disassemble
    (fn ^doubles [^doubles [x y z] ^double s]
      [(* x s) (* y s) (* z s)])))

  // Method descriptor #53 (Ljava/lang/Object;D)Ljava/lang/Object;
  // Stack: 6, Locals: 8
  public final java.lang.Object invokePrim(java.lang.Object p__4346, double s);
     0  aload_1 [p__4346]
     1  aconst_null
     2  astore_1 [p__4346]
     3  astore 4 [vec__4348]
     5  aload 4 [vec__4348]
     7  lconst_0
     8  invokestatic clojure.lang.RT.intCast(long) : int [57]
    11  aconst_null
    12  invokestatic clojure.lang.RT.nth(java.lang.Object, int, java.lang.Object) : java.lang.Object [60]
    15  astore 5 [x]
    17  aload 4 [vec__4348]
    19  lconst_1
    20  invokestatic clojure.lang.RT.intCast(long) : int [57]
    23  aconst_null
    24  invokestatic clojure.lang.RT.nth(java.lang.Object, int, java.lang.Object) : java.lang.Object [60]
    27  astore 6 [y]
    29  aload 4 [vec__4348]
    31  aconst_null
    32  astore 4 [vec__4348]
    34  ldc2_w <Long 2> [41]
    37  invokestatic clojure.lang.RT.intCast(long) : int [57]
    40  aconst_null
    41  invokestatic clojure.lang.RT.nth(java.lang.Object, int, java.lang.Object) : java.lang.Object [60]
    44  astore 7 [z]
    46  iconst_3
    47  anewarray java.lang.Object [62]
    50  dup
    51  iconst_0
    52  aload 5 [x]
    54  aconst_null
    55  astore 5 [x]
    57  dload_2 [s]
    58  invokestatic clojure.lang.Numbers.multiply(java.lang.Object, double) : double [68]
    61  invokestatic java.lang.Double.valueOf(double) : java.lang.Double [73]
    64  aastore
    65  dup
    66  iconst_1
    67  aload 6 [y]
    69  aconst_null
    70  astore 6 [y]
    72  dload_2 [s]
    73  invokestatic clojure.lang.Numbers.multiply(java.lang.Object, double) : double [68]
    76  invokestatic java.lang.Double.valueOf(double) : java.lang.Double [73]
    79  aastore
    80  dup
    81  iconst_2
    82  aload 7 [z]
    84  aconst_null
    85  astore 7 [z]
    87  dload_2 [s]
    88  invokestatic clojure.lang.Numbers.multiply(java.lang.Object, double) : double [68]
    91  invokestatic java.lang.Double.valueOf(double) : java.lang.Double [73]
    94  aastore
    95  invokestatic clojure.lang.RT.vector(java.lang.Object[]) : clojure.lang.IPersistentVector [77]
    98  areturn

(println
  (disassemble
    (fn ^doubles [^double x ^double y ^double z ^double s]
      [(* x s) (* y s) (* z s)])))

  public final double[] invokePrim(double x, double z, double arg2, double arg3);
     0  iconst_3
     1  anewarray java.lang.Object [32]
     4  dup
     5  iconst_0
     6  dload_1 [x]
     7  dload 7 [arg3]
     9  invokestatic clojure.lang.Numbers.multiply(double, double) : double [38]
    12  invokestatic java.lang.Double.valueOf(double) : java.lang.Double [44]
    15  aastore
    16  dup
    17  iconst_1
    18  dload_3 [z]
    19  dload 7 [arg3]
    21  invokestatic clojure.lang.Numbers.multiply(double, double) : double [38]
    24  invokestatic java.lang.Double.valueOf(double) : java.lang.Double [44]
    27  aastore
    28  dup
    29  iconst_2
    30  dload 5 [arg2]
    32  dload 7 [arg3]
    34  invokestatic clojure.lang.Numbers.multiply(double, double) : double [38]
    37  invokestatic java.lang.Double.valueOf(double) : java.lang.Double [44]
    40  aastore
    41  invokestatic clojure.lang.RT.vector(java.lang.Object[]) : clojure.lang.IPersistentVector [48]
    44  checkcast double[] [50]
    47  areturn

(set! *unchecked-math* true)

  public final double[] invokePrim(double x, double z, double arg2, double arg3);
     0  iconst_3
     1  anewarray java.lang.Object [32]
     4  dup
     5  iconst_0
     6  dload_1 [x]
     7  dload 7 [arg3]
     9  invokestatic clojure.lang.Numbers.unchecked_multiply(double, double) : double [38]
    12  invokestatic java.lang.Double.valueOf(double) : java.lang.Double [44]
    15  aastore
    16  dup
    17  iconst_1
    18  dload_3 [z]
    19  dload 7 [arg3]
    21  invokestatic clojure.lang.Numbers.unchecked_multiply(double, double) : double [38]
    24  invokestatic java.lang.Double.valueOf(double) : java.lang.Double [44]
    27  aastore
    28  dup
    29  iconst_2
    30  dload 5 [arg2]
    32  dload 7 [arg3]
    34  invokestatic clojure.lang.Numbers.unchecked_multiply(double, double) : double [38]
    37  invokestatic java.lang.Double.valueOf(double) : java.lang.Double [44]
    40  aastore
    41  invokestatic clojure.lang.RT.vector(java.lang.Object[]) : clojure.lang.IPersistentVector [48]
    44  checkcast double[] [50]
    47  areturn
#+end_src

hmmm...

#+begin_src bash
(println
  (disassemble
    (fn ^double [^double x ^double y ^double z ^double s]
      (+ (* x s) (* y s) (* z s)))))

  public final double invokePrim(double x, double z, double arg2, double arg3);
     0  dload_1 [x]
     1  dload 7 [arg3]
     3  dmul
     4  dload_3 [z]
     5  dload 7 [arg3]
     7  dmul
     8  dadd
     9  dload 5 [arg2]
    11  dload 7 [arg3]
    13  dmul
    14  dadd
    15  dreturn
#+end_src

http://stackoverflow.com/questions/11824815/fast-complex-number-arithmetic-in-clojure
also check out http://www.infoq.com/presentations/Crunching-Numbers-Clojure
https://github.com/strangeloop/clojurewest2012-slides/blob/master/Solano-G%C3%B3mez-Crunching-Numbers-with-Clojure.pdf (download raw)

#+begin_src bash
(deftype Vector3 [^double x ^double y ^double z])

(println
  (disassemble
    (fn ^Vector3 [^Vector3 v ^double s]
    (Vector3. (* (.x v) s) (* (.y v) s) (* (.z v) s)))))

  public final iris.core.Vector3 invokePrim(java.lang.Object v, double s);
     0  new iris.core.Vector3 [32]
     3  dup
     4  aload_1 [v]
     5  checkcast iris.core.Vector3 [32]
     8  getfield iris.core.Vector3.x : double [36]
    11  dload_2 [s]
    12  dmul
    13  aload_1 [v]
    14  checkcast iris.core.Vector3 [32]
    17  getfield iris.core.Vector3.y : double [39]
    20  dload_2 [s]
    21  dmul
    22  aload_1 [v]
    23  aconst_null
    24  astore_1 [v]
    25  checkcast iris.core.Vector3 [32]
    28  getfield iris.core.Vector3.z : double [42]
    31  dload_2 [s]
    32  dmul
    33  invokespecial iris.core.Vector3(double, double, double) [45]
    36  checkcast iris.core.Vector3 [32]
    39  areturn
#+end_src

Well, it is simpler to add a defrecord. Will that work?

#+begin_src bash
(defrecord Vector3 [^double x ^double y ^double z])

(println
  (disassemble
    (fn ^Vector3 [^Vector3 v ^double s]
    (Vector3. (* (.x v) s) (* (.y v) s) (* (.z v) s)))))

  public final iris.matrix.Vector3 invokePrim(java.lang.Object v, double s);
     0  new iris.matrix.Vector3 [32]
     3  dup
     4  aload_1 [v]
     5  checkcast iris.matrix.Vector3 [32]
     8  getfield iris.matrix.Vector3.x : double [36]
    11  dload_2 [s]
    12  dmul
    13  aload_1 [v]
    14  checkcast iris.matrix.Vector3 [32]
    17  getfield iris.matrix.Vector3.y : double [39]
    20  dload_2 [s]
    21  dmul
    22  aload_1 [v]
    23  aconst_null
    24  astore_1 [v]
    25  checkcast iris.matrix.Vector3 [32]
    28  getfield iris.matrix.Vector3.z : double [42]
    31  dload_2 [s]
    32  dmul
    33  invokespecial iris.matrix.Vector3(double, double, double) [45]
    36  checkcast iris.matrix.Vector3 [32]
    39  areturn
#+end_src

Yep, looks good

Okay, what is up here?

#+begin_src bash
iris.matrix> ((fn ^Vector2 [^Vector2 u ^Vector2 v] (Vector2. (- (.x u) (.x v)) (- (.y u) (.y v))))
              (Vector2. 3 4)
              (Vector2. 1 2))
#iris.matrix.Vector2{:x 2.0, :y 2.0}
#+end_src

works, but

#+begin_src bash
iris.matrix> ((fn ^Vector2 [^Vector2 v ^double s] (Vector2. (* (.x v) s) (* (.y v) s)))
              (Vector2. 1 2)
              3.0)
NoSuchMethodError clojure.lang.IFn$ODO.invokePrim(Ljava/lang/Object;D)Liris/matrix/Vector2;  iris.matrix/eval3903/fn--3904 (form-init8016029507365162516.clj:-1)
#+end_src

and stripping off the annotation works

#+begin_src bash
iris.matrix> ((fn [^Vector2 v ^double s] (Vector2. (* (.x v) s) (* (.y v) s)))
              (Vector2. 1 2)
              3.0)
#iris.matrix.Vector2{:x 3.0, :y 6.0}
#+end_src

First case:

#+begin_src bash
(println (disassemble (fn ^Vector2 [^Vector2 u ^Vector2 v] (Vector2. (- (.x u) (.x v)) (- (.y u) (.y v))))))

// Compiled from form-init8016029507365162516.clj (version 1.5 : 49.0, super bit)
public final class iris.matrix$eval3914$fn__3915 extends clojure.lang.AFunction {

  // Field descriptor #7 Lclojure/lang/Var;
  public static final clojure.lang.Var const__0;

  // Method descriptor #9 ()V
  // Stack: 2, Locals: 0
  public static {};
     0  ldc <String "clojure.core"> [11]
     2  ldc <String "-"> [13]
     4  invokestatic clojure.lang.RT.var(java.lang.String, java.lang.String) : clojure.lang.Var [19]
     7  checkcast clojure.lang.Var [21]
    10  putstatic iris.matrix$eval3914$fn__3915.const__0 : clojure.lang.Var [23]
    13  return
      Line numbers:
        [pc: 0, line: 1]

  // Method descriptor #9 ()V
  // Stack: 1, Locals: 1
  public matrix$eval3914$fn__3915();
    0  aload_0 [this]
    1  invokespecial clojure.lang.AFunction() [26]
    4  return
      Line numbers:
        [pc: 0, line: 1]

  // Method descriptor #28 (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
  // Stack: 8, Locals: 3
  public java.lang.Object invoke(java.lang.Object u, java.lang.Object v);
     0  new iris.matrix.Vector2 [30]
     3  dup
     4  aload_1 [u]
     5  checkcast iris.matrix.Vector2 [30]
     8  getfield iris.matrix.Vector2.x : double [34]
    11  aload_2 [v]
    12  checkcast iris.matrix.Vector2 [30]
    15  getfield iris.matrix.Vector2.x : double [34]
    18  dsub
    19  aload_1 [u]
    20  aconst_null
    21  astore_1 [u]
    22  checkcast iris.matrix.Vector2 [30]
    25  getfield iris.matrix.Vector2.y : double [37]
    28  aload_2 [v]
    29  aconst_null
    30  astore_2 [v]
    31  checkcast iris.matrix.Vector2 [30]
    34  getfield iris.matrix.Vector2.y : double [37]
    37  dsub
    38  invokespecial iris.matrix.Vector2(double, double) [40]
    41  areturn
      Line numbers:
        [pc: 0, line: 1]
        [pc: 4, line: 1]
        [pc: 4, line: 1]
        [pc: 11, line: 1]
        [pc: 19, line: 1]
        [pc: 19, line: 1]
        [pc: 28, line: 1]
      Local variable table:
        [pc: 0, pc: 41] local: this index: 0 type: java.lang.Object
        [pc: 0, pc: 41] local: u index: 1 type: java.lang.Object
        [pc: 0, pc: 41] local: v index: 2 type: java.lang.Object

}
#+end_src

Vs:

#+begin_src bash
(println (disassemble (fn ^Vector2 [^Vector2 v ^double s] (Vector2. (* (.x v) s) (* (.y v) s)))))

// Compiled from form-init8016029507365162516.clj (version 1.5 : 49.0, super bit)
public final class iris.matrix$eval3918$fn__3919 extends clojure.lang.AFunction implements clojure.lang.IFn$ODO {

  // Field descriptor #9 Lclojure/lang/Var;
  public static final clojure.lang.Var const__0;

  // Method descriptor #11 ()V
  // Stack: 2, Locals: 0
  public static {};
     0  ldc <String "clojure.core"> [13]
     2  ldc <String "*"> [15]
     4  invokestatic clojure.lang.RT.var(java.lang.String, java.lang.String) : clojure.lang.Var [21]
     7  checkcast clojure.lang.Var [23]
    10  putstatic iris.matrix$eval3918$fn__3919.const__0 : clojure.lang.Var [25]
    13  return
      Line numbers:
        [pc: 0, line: 1]

  // Method descriptor #11 ()V
  // Stack: 1, Locals: 1
  public matrix$eval3918$fn__3919();
    0  aload_0 [this]
    1  invokespecial clojure.lang.AFunction() [28]
    4  return
      Line numbers:
        [pc: 0, line: 1]

  // Method descriptor #30 (Ljava/lang/Object;D)Liris/matrix/Vector2;
  // Stack: 8, Locals: 4
  public final iris.matrix.Vector2 invokePrim(java.lang.Object v, double s);
     0  new iris.matrix.Vector2 [32]
     3  dup
     4  aload_1 [v]
     5  checkcast iris.matrix.Vector2 [32]
     8  getfield iris.matrix.Vector2.x : double [36]
    11  dload_2 [s]
    12  dmul
    13  aload_1 [v]
    14  aconst_null
    15  astore_1 [v]
    16  checkcast iris.matrix.Vector2 [32]
    19  getfield iris.matrix.Vector2.y : double [39]
    22  dload_2 [s]
    23  dmul
    24  invokespecial iris.matrix.Vector2(double, double) [42]
    27  checkcast iris.matrix.Vector2 [32]
    30  areturn
      Line numbers:
        [pc: 0, line: 1]
        [pc: 4, line: 1]
        [pc: 4, line: 1]
        [pc: 13, line: 1]
        [pc: 13, line: 1]
      Local variable table:
        [pc: 0, pc: 30] local: this index: 0 type: java.lang.Object
        [pc: 0, pc: 30] local: v index: 1 type: java.lang.Object
        [pc: 0, pc: 30] local: s index: 2 type: double

  // Method descriptor #48 (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
  // Stack: 4, Locals: 3
  public java.lang.Object invoke(java.lang.Object arg0, java.lang.Object arg1);
     0  aload_0 [this]
     1  aload_1 [arg0]
     2  aload_2 [arg1]
     3  checkcast java.lang.Number [50]
     6  invokestatic clojure.lang.RT.doubleCast(java.lang.Object) : double [54]
     9  invokeinterface clojure.lang.IFn$ODO.invokePrim(java.lang.Object, double) : iris.matrix.Vector2 [56] [nargs: 4]
    14  areturn
#+end_src

That looks to me like the first one doesn't actually have a Vector2 return type.

HA!  Updating to clojure 1.6.0 fixes this!

* first results after implementation using defrecord

Not good!  46 seconds vs 8(!)

#+begin_src bash
thunder 08:13:43 iris> lein test iris.perf-test

lein test iris.perf-test
(216 cubes  no parallelism) : "Elapsed time: 46002.356401 msecs"

lein test :only iris.perf-test/many-triangles

FAIL in (perf-test-all many-triangles) (perf_test.clj:184)
216 cubes  no parallelism
expected: (= crc the-crc)
  actual: (not (= 1521780774 1165338380))
#+end_src

* profiling

/System/Library/Frameworks/JavaVM.framework/Versions/Current/Commands/jvisualvm &

At this point, we were in the *mid-30s* for profiling.

Using Profiler with preset of
1) Start profiling iris.** and
2) Do not profile clojure.*, ...

(v2->v3) and (v3->v2) show up as significant issues.
rasterize triangle is the top hotspot, then shade-pixels

Found v2->v3 seemed to be used for cross products that could be optimized.  See cross2s

Now at *20s* for profiling.

(v3->v2) still shows up

Found a way to do the conversion once per prim in rasterize-triangle

Now at *14s* for profiling.

inside-port? is showing up as hotspot.
put (view-key state) in a let with an annotation.  Now at 6 seconds!

#+begin_src bash
lein test iris.perf-test
[crc mismatches not shown]
(216 cubes  no parallelism) : "Elapsed time: 15760.320269 msecs"
(216 cubes  2x parallelism) : "Elapsed time: 8362.59655 msecs"
(216 cubes  3x parallelism) : "Elapsed time: 6214.615955 msecs"
(216 cubes  4x parallelism) : "Elapsed time: 5845.003655 msecs"
#+end_src

okay lein run shows functional issues.  Need to go back & see where I
went wrong.  pt-in-triangle may be returning true always.

Okay some stuff now working & matching, but not lighting.
Matching stuff seems okay, but still not better perf.

new

#+begin_src bash
(single fullscreen triangle  no parallelism) : "Elapsed time: 5694.749797 msecs"
(single fullscreen triangle  2x parallelism) : "Elapsed time: 2872.913789 msecs"
(single fullscreen triangle  3x parallelism) : "Elapsed time: 2144.712486 msecs"
(single fullscreen triangle  4x parallelism) : "Elapsed time: 1945.576305 msecs"
(single fullscreen triangle  6x parallelism) : "Elapsed time: 1865.665903 msecs"
(single fullscreen triangle  8x parallelism) : "Elapsed time: 1813.051601 msecs"
(single fullscreen triangle 12x parallelism) : "Elapsed time: 1828.729529 msecs"
(single fullscreen triangle 16x parallelism) : "Elapsed time: 2079.975679 msecs"
(single fullscreen triangle 24x parallelism) : "Elapsed time: 1973.356779 msecs"
(single fullscreen triangle 32x parallelism) : "Elapsed time: 2052.450574 msecs"
#+end_src

old

#+begin_src bash
(single fullscreen triangle  no parallelism) : "Elapsed time: 4882.02033 msecs"
(single fullscreen triangle  2x parallelism) : "Elapsed time: 2651.232392 msecs"
(single fullscreen triangle  3x parallelism) : "Elapsed time: 2061.476135 msecs"
(single fullscreen triangle  4x parallelism) : "Elapsed time: 1860.74629 msecs"
(single fullscreen triangle  6x parallelism) : "Elapsed time: 1473.644829 msecs"
(single fullscreen triangle  8x parallelism) : "Elapsed time: 1309.661062 msecs"
(single fullscreen triangle 12x parallelism) : "Elapsed time: 1972.506385 msecs"
(single fullscreen triangle 16x parallelism) : "Elapsed time: 1619.04987 msecs"
(single fullscreen triangle 24x parallelism) : "Elapsed time: 1844.076739 msecs"
(single fullscreen triangle 32x parallelism) : "Elapsed time: 2039.124112 msecs"
#+end_src

v3->v2 is still taking gobs of time.  hacking around in the
triangle-area routine gives a better result.

Okay, now we're finally faster!

#+begin_src bash
(single fullscreen triangle  no parallelism) : "Elapsed time: 3581.05198 msecs"
(single fullscreen triangle  2x parallelism) : "Elapsed time: 1989.578822 msecs"
(single fullscreen triangle  3x parallelism) : "Elapsed time: 1336.251624 msecs"
(single fullscreen triangle  4x parallelism) : "Elapsed time: 1356.560345 msecs"
(single fullscreen triangle  6x parallelism) : "Elapsed time: 1126.806003 msecs"
(single fullscreen triangle  8x parallelism) : "Elapsed time: 1110.197534 msecs"
(single fullscreen triangle 12x parallelism) : "Elapsed time: 1420.191147 msecs"
(single fullscreen triangle 16x parallelism) : "Elapsed time: 1248.029342 msecs"
(single fullscreen triangle 24x parallelism) : "Elapsed time: 1505.359094 msecs"
(single fullscreen triangle 32x parallelism) : "Elapsed time: 1614.978974 msecs"
#+end_src

And I fixed the CRC issue and now we're faster and correct.

#+begin_src bash
(216 cubes  no parallelism) : "Elapsed time: 4296.909136 msecs"
(216 cubes  2x parallelism) : "Elapsed time: 2552.969233 msecs"
(216 cubes  3x parallelism) : "Elapsed time: 2009.485137 msecs"
(216 cubes  4x parallelism) : "Elapsed time: 1957.306615 msecs"
(216 cubes  6x parallelism) : "Elapsed time: 2046.001932 msecs"
(216 cubes  8x parallelism) : "Elapsed time: 2322.24099 msecs"
(216 cubes 12x parallelism) : "Elapsed time: 3017.912651 msecs"
(216 cubes 16x parallelism) : "Elapsed time: 3551.944311 msecs"
(216 cubes 24x parallelism) : "Elapsed time: 4679.56636 msecs"
(216 cubes 32x parallelism) : "Elapsed time: 5816.013941 msecs"
(single fullscreen triangle  no parallelism) : "Elapsed time: 3429.820826 msecs"
(single fullscreen triangle  2x parallelism) : "Elapsed time: 1824.202668 msecs"
(single fullscreen triangle  3x parallelism) : "Elapsed time: 1319.852346 msecs"
(single fullscreen triangle  4x parallelism) : "Elapsed time: 1410.653814 msecs"
(single fullscreen triangle  6x parallelism) : "Elapsed time: 1196.475094 msecs"
(single fullscreen triangle  8x parallelism) : "Elapsed time: 1130.31839 msecs"
(single fullscreen triangle 12x parallelism) : "Elapsed time: 1156.708277 msecs"
(single fullscreen triangle 16x parallelism) : "Elapsed time: 1191.819365 msecs"
(single fullscreen triangle 24x parallelism) : "Elapsed time: 1547.907317 msecs"
(single fullscreen triangle 32x parallelism) : "Elapsed time: 1695.183978 msecs"
#+end_src

But, I hacked up some stuff more than I wanted. I wonder if
annotations on the conversions would help?

Okay, I un-hacked the worst of it.  Still similar perf.

Alright, the last remainging small hotspot is the interpolate function...
I did some in-lining, but it made the code ugly for no apparent gain.

* using 'dev' profile speeds it up!  why?

#+begin_src bash
thunder 07:12:11 iris> lein with-profile dev test iris.perf-test
(216 cubes  no parallelism) : "Elapsed time: 8776.367902 msecs"
^C
#+end_src

What? this is 1/2 the speed of normal.

#+begin_src bash
thunder 07:11:18 iris> lein test iris.perf-test
(216 cubes  no parallelism) : "Elapsed time: 14606.117784 msecs"

lein docs say :default is a composite profile with
[:base :system :user :provided :dev].

thunder 07:14:15 iris> lein with-profile base test iris.perf-test
(216 cubes  no parallelism) : "Elapsed time: 14466.744698 msecs"
thunder 07:16:01 iris> lein with-profile system test iris.perf-test
(216 cubes  no parallelism) : "Elapsed time: 8582.240867 msecs"
thunder 07:16:27 iris> lein with-profile user test iris.perf-test
(216 cubes  no parallelism) : "Elapsed time: 8917.121893 msecs"
thunder 07:16:55 iris> lein with-profile provided test iris.perf-test
(216 cubes  no parallelism) : "Elapsed time: 8702.617338 msecs"
#+end_src

Okay, what is different between :base and the rest?

#+begin_src bash
> lein show-profiles base
{:resource-paths ["dev-resources"],
 :jvm-opts
 ["-XX:+TieredCompilation"
  "-XX:TieredStopAtLevel=1"
  "-XX:-OmitStackTraceInFastThrow"],
...
#+end_src

Well, now I understand wtf TierCompilation is!  UGH!

https://github.com/technomancy/leiningen/wiki/Faster

Leiningen 2.1.0 onward get a speed boost by disabling the optimized
compilation (which only benefits long-running processes) for both your
project and Leiningen itself.

Be aware that this can negatively affect performance in the long run
(or lead to inaccurate benchmarking results). If you do have a
long-running processes and want the JVM to fully optimize, you can
disable tiered compilation by ...

Okay, added that to project.clj...

* new results after disabling tiered compilation

Nice 2x speed boost!

#+begin_src bash
thunder 07:22:46 iris> lein test iris.perf-test

lein test iris.perf-test
(216 cubes  no parallelism) : "Elapsed time: 8592.009211 msecs"
(216 cubes  2x parallelism) : "Elapsed time: 4292.005445 msecs"
(216 cubes  3x parallelism) : "Elapsed time: 3248.854562 msecs"
(216 cubes  4x parallelism) : "Elapsed time: 3264.126976 msecs"
(216 cubes  6x parallelism) : "Elapsed time: 2741.459156 msecs"
(216 cubes  8x parallelism) : "Elapsed time: 2304.194795 msecs"
(216 cubes 12x parallelism) : "Elapsed time: 2590.118084 msecs"
(216 cubes 16x parallelism) : "Elapsed time: 2815.603783 msecs"
(216 cubes 24x parallelism) : "Elapsed time: 3487.783907 msecs"
(216 cubes 32x parallelism) : "Elapsed time: 3905.204436 msecs"
(single fullscreen triangle  no parallelism) : "Elapsed time: 4882.02033 msecs"
(single fullscreen triangle  2x parallelism) : "Elapsed time: 2651.232392 msecs"
(single fullscreen triangle  3x parallelism) : "Elapsed time: 2061.476135 msecs"
(single fullscreen triangle  4x parallelism) : "Elapsed time: 1860.74629 msecs"
(single fullscreen triangle  6x parallelism) : "Elapsed time: 1473.644829 msecs"
(single fullscreen triangle  8x parallelism) : "Elapsed time: 1309.661062 msecs"
(single fullscreen triangle 12x parallelism) : "Elapsed time: 1972.506385 msecs"
(single fullscreen triangle 16x parallelism) : "Elapsed time: 1619.04987 msecs"
(single fullscreen triangle 24x parallelism) : "Elapsed time: 1844.076739 msecs"
(single fullscreen triangle 32x parallelism) : "Elapsed time: 2039.124112 msecs"

Ran 21 tests containing 20 assertions.
0 failures, 0 errors.
#+end_src

* old results for comparison

#+begin_src bash
(216 cubes  no parallelism) : "Elapsed time: 14795.149657 msecs"
(216 cubes  2x parallelism) : "Elapsed time: 8491.273422 msecs"
(216 cubes  3x parallelism) : "Elapsed time: 6398.070178 msecs"
(216 cubes  4x parallelism) : "Elapsed time: 5828.502012 msecs"
(216 cubes  6x parallelism) : "Elapsed time: 5170.583644 msecs"
(216 cubes  8x parallelism) : "Elapsed time: 5038.825765 msecs"
(216 cubes 12x parallelism) : "Elapsed time: 5350.82897 msecs"
(216 cubes 16x parallelism) : "Elapsed time: 5928.403589 msecs"
(216 cubes 24x parallelism) : "Elapsed time: 7249.863398 msecs"
(216 cubes 32x parallelism) : "Elapsed time: 8401.258671 msecs"
(single fullscreen triangle  no parallelism) : "Elapsed time: 9169.407479 msecs"
(single fullscreen triangle  2x parallelism) : "Elapsed time: 5362.604465 msecs"
(single fullscreen triangle  3x parallelism) : "Elapsed time: 4032.685349 msecs"
(single fullscreen triangle  4x parallelism) : "Elapsed time: 3573.987153 msecs"
(single fullscreen triangle  6x parallelism) : "Elapsed time: 3118.119322 msecs"
(single fullscreen triangle  8x parallelism) : "Elapsed time: 3002.58433 msecs"
(single fullscreen triangle 12x parallelism) : "Elapsed time: 3908.954978 msecs"
(single fullscreen triangle 16x parallelism) : "Elapsed time: 4566.061129 msecs"
(single fullscreen triangle 24x parallelism) : "Elapsed time: 4649.887223 msecs"
(single fullscreen triangle 32x parallelism) : "Elapsed time: 5423.851433 msecs"
#+end_src

* Ha!  Back to the original branch

Going back to the original master branch, pulling out the general
speedups I found and applying them results in the most improvement of
all.  Wow!

Just to be explicit, this is a 5.7x speedup from last week.

#+begin_src bash
14795.149657/2593.630651 = 5.70
9169.407479/1599.242374 = 5.73
#+end_src

#+begin_src bash
(216 cubes  no parallelism) : "Elapsed time: 2593.630651 msecs"
(216 cubes  2x parallelism) : "Elapsed time: 1324.937414 msecs"
(216 cubes  3x parallelism) : "Elapsed time: 921.86116 msecs"
(216 cubes  4x parallelism) : "Elapsed time: 992.562389 msecs"
(216 cubes  6x parallelism) : "Elapsed time: 991.780843 msecs"
(216 cubes  8x parallelism) : "Elapsed time: 910.661297 msecs"
(216 cubes 12x parallelism) : "Elapsed time: 1215.177516 msecs"
(216 cubes 16x parallelism) : "Elapsed time: 1352.760895 msecs"
(216 cubes 24x parallelism) : "Elapsed time: 1891.134987 msecs"
(216 cubes 32x parallelism) : "Elapsed time: 2668.556759 msecs"
(single fullscreen triangle  no parallelism) : "Elapsed time: 1599.242374 msecs"
(single fullscreen triangle  2x parallelism) : "Elapsed time: 925.452086 msecs"
(single fullscreen triangle  3x parallelism) : "Elapsed time: 1060.741359 msecs"
(single fullscreen triangle  4x parallelism) : "Elapsed time: 675.00857 msecs"
(single fullscreen triangle  6x parallelism) : "Elapsed time: 687.147944 msecs"
(single fullscreen triangle  8x parallelism) : "Elapsed time: 641.089701 msecs"
(single fullscreen triangle 12x parallelism) : "Elapsed time: 1342.737485 msecs"
(single fullscreen triangle 16x parallelism) : "Elapsed time: 927.358319 msecs"
(single fullscreen triangle 24x parallelism) : "Elapsed time: 1037.464765 msecs"
(single fullscreen triangle 32x parallelism) : "Elapsed time: 1330.315375 msecs"
#+end_src

I suspect at this point perhaps the overhead of defrecord could be an issue?

But, at this point, I think I like the flexibility of what is on the main branch.
* using double-array

asked wtf? on stack overflow...
http://stackoverflow.com/questions/27671638/why-is-this-type-annotation-failing

Tried using (double-array [1 2 3]) for everything...no dice--it got slower.

lein test iris.perf-test
(216 cubes  no parallelism) : "Elapsed time: 9308.375949 msecs"
(216 cubes  2x parallelism) : "Elapsed time: 5206.39865 msecs"
(216 cubes  3x parallelism) : "Elapsed time: 4381.14412 msecs"
(216 cubes  4x parallelism) : "Elapsed time: 4674.926511 msecs"
(216 cubes  6x parallelism) : "Elapsed time: 4329.25756 msecs"
(216 cubes  8x parallelism) : "Elapsed time: 4571.784438 msecs"
(216 cubes 12x parallelism) : "Elapsed time: 6094.627272 msecs"
(216 cubes 16x parallelism) : "Elapsed time: 7540.179693 msecs"
(216 cubes 24x parallelism) : "Elapsed time: 10783.82498 msecs"
(216 cubes 32x parallelism) : "Elapsed time: 13616.487323 msecs"
(single fullscreen triangle  no parallelism) : "Elapsed time: 5517.092364 msecs"
(single fullscreen triangle  2x parallelism) : "Elapsed time: 2723.009397 msecs"
(single fullscreen triangle  3x parallelism) : "Elapsed time: 2046.70173 msecs"
(single fullscreen triangle  4x parallelism) : "Elapsed time: 2149.476969 msecs"
(single fullscreen triangle  6x parallelism) : "Elapsed time: 1941.980581 msecs"
(single fullscreen triangle  8x parallelism) : "Elapsed time: 1917.412988 msecs"
(single fullscreen triangle 12x parallelism) : "Elapsed time: 2400.758826 msecs"
(single fullscreen triangle 16x parallelism) : "Elapsed time: 3017.880897 msecs"
(single fullscreen triangle 24x parallelism) : "Elapsed time: 3498.389367 msecs"
(single fullscreen triangle 32x parallelism) : "Elapsed time: 4414.278437 msecs"

Okay, going to try using https://github.com/ztellman/primitive-math

* using primitive-math

Alrighty!  This is waaay better now.

#+begin_src bash
lein test iris.perf-test
(216 cubes  no parallelism) : "Elapsed time: 1931.921894 msecs"
(216 cubes  2x parallelism) : "Elapsed time: 1008.232801 msecs"
(216 cubes  3x parallelism) : "Elapsed time: 686.453068 msecs"
(216 cubes  4x parallelism) : "Elapsed time: 675.946363 msecs"
(216 cubes  6x parallelism) : "Elapsed time: 721.27126 msecs"
(216 cubes  8x parallelism) : "Elapsed time: 961.145869 msecs"
(216 cubes 12x parallelism) : "Elapsed time: 954.415495 msecs"
(216 cubes 16x parallelism) : "Elapsed time: 1014.576405 msecs"
(216 cubes 24x parallelism) : "Elapsed time: 1571.693896 msecs"
(216 cubes 32x parallelism) : "Elapsed time: 1830.535151 msecs"
(single fullscreen triangle  no parallelism) : "Elapsed time: 1312.748963 msecs"
(single fullscreen triangle  2x parallelism) : "Elapsed time: 738.026696 msecs"
(single fullscreen triangle  3x parallelism) : "Elapsed time: 556.508232 msecs"
(single fullscreen triangle  4x parallelism) : "Elapsed time: 529.526084 msecs"
(single fullscreen triangle  6x parallelism) : "Elapsed time: 478.281843 msecs"
(single fullscreen triangle  8x parallelism) : "Elapsed time: 467.607609 msecs"
(single fullscreen triangle 12x parallelism) : "Elapsed time: 816.01548 msecs"
(single fullscreen triangle 16x parallelism) : "Elapsed time: 627.024968 msecs"
(single fullscreen triangle 24x parallelism) : "Elapsed time: 794.304665 msecs"
(single fullscreen triangle 32x parallelism) : "Elapsed time: 964.363928 msecs"
#+end_src

#+begin_src bash
14795.149657/1931.921894 = 7.65
9169.407479/1312.748963 = 6.98
#+end_src

After removing some double-array construction

#+begin_src bash
lein test iris.perf-test
(216 cubes  no parallelism) : "Elapsed time: 1767.453057 msecs"
(216 cubes  2x parallelism) : "Elapsed time: 966.114943 msecs"
(216 cubes  3x parallelism) : "Elapsed time: 636.095948 msecs"
(216 cubes  4x parallelism) : "Elapsed time: 708.604979 msecs"
(216 cubes  6x parallelism) : "Elapsed time: 970.959931 msecs"
(216 cubes  8x parallelism) : "Elapsed time: 616.27801 msecs"
(216 cubes 12x parallelism) : "Elapsed time: 821.909129 msecs"
(216 cubes 16x parallelism) : "Elapsed time: 904.205218 msecs"
(216 cubes 24x parallelism) : "Elapsed time: 1155.058726 msecs"
(216 cubes 32x parallelism) : "Elapsed time: 1433.042791 msecs"
(single fullscreen triangle  no parallelism) : "Elapsed time: 1112.795829 msecs"
(single fullscreen triangle  2x parallelism) : "Elapsed time: 621.516822 msecs"
(single fullscreen triangle  3x parallelism) : "Elapsed time: 473.487015 msecs"
(single fullscreen triangle  4x parallelism) : "Elapsed time: 484.71948 msecs"
(single fullscreen triangle  6x parallelism) : "Elapsed time: 423.593976 msecs"
(single fullscreen triangle  8x parallelism) : "Elapsed time: 428.208255 msecs"
(single fullscreen triangle 12x parallelism) : "Elapsed time: 507.244406 msecs"
(single fullscreen triangle 16x parallelism) : "Elapsed time: 636.026582 msecs"
(single fullscreen triangle 24x parallelism) : "Elapsed time: 925.871964 msecs"
(single fullscreen triangle 32x parallelism) : "Elapsed time: 1645.000944 msecs"
#+end_src

#+begin_src bash
14795.149657/1767.453057 = 8.37
9169.407479/1112.795829 = 8.23
#+end_src

I think we're now dominated by setup time.  Going to have to make the screens bigger.

* New version of perf test

#+begin_src bash
lein test iris.perf-test
(512 cubes  no parallelism) : "Elapsed time: 10111.669042 msecs"
(512 cubes  2x parallelism) : "Elapsed time: 6240.653574 msecs"
(512 cubes  3x parallelism) : "Elapsed time: 5093.12341 msecs"
(512 cubes  4x parallelism) : "Elapsed time: 4325.960249 msecs"
(512 cubes  6x parallelism) : "Elapsed time: 3993.311033 msecs"
(512 cubes  8x parallelism) : "Elapsed time: 3903.345496 msecs"
(512 cubes 12x parallelism) : "Elapsed time: 4211.483563 msecs"
(512 cubes 16x parallelism) : "Elapsed time: 5008.49274 msecs"
(512 cubes 24x parallelism) : "Elapsed time: 6224.248899 msecs"
(512 cubes 32x parallelism) : "Elapsed time: 6903.455556 msecs"
(single fullscreen triangle  no parallelism) : "Elapsed time: 11784.184516 msecs"
(single fullscreen triangle  2x parallelism) : "Elapsed time: 7656.591937 msecs"
(single fullscreen triangle  3x parallelism) : "Elapsed time: 5937.879183 msecs"
(single fullscreen triangle  4x parallelism) : "Elapsed time: 4507.107014 msecs"
(single fullscreen triangle  6x parallelism) : "Elapsed time: 6435.558707 msecs"
(single fullscreen triangle  8x parallelism) : "Elapsed time: 3865.504396 msecs"
(single fullscreen triangle 12x parallelism) : "Elapsed time: 7401.487492 msecs"
(single fullscreen triangle 16x parallelism) : "Elapsed time: 5342.439737 msecs"
(single fullscreen triangle 24x parallelism) : "Elapsed time: 10663.3523 msecs"
(single fullscreen triangle 32x parallelism) : "Elapsed time: 8514.062685 msecs"
#+end_src

* adding *unchecked-math* helps

Re-read http://insideclojure.org/2014/12/15/warn-on-boxed/ and decided
to try adding (set! *unchecked-math* true) again.  It seems to work
for the smaller-parallelism tasks.

#+begin_src bash
(512 cubes  no parallelism) : "Elapsed time: 10406.24202 msecs"
(512 cubes  2x parallelism) : "Elapsed time: 5948.188421 msecs"
(512 cubes  3x parallelism) : "Elapsed time: 4917.208036 msecs"
(512 cubes  4x parallelism) : "Elapsed time: 4638.648983 msecs"
(512 cubes  6x parallelism) : "Elapsed time: 4044.513855 msecs"
(512 cubes  8x parallelism) : "Elapsed time: 3979.507135 msecs"
(512 cubes 12x parallelism) : "Elapsed time: 4555.634951 msecs"
(512 cubes 16x parallelism) : "Elapsed time: 5032.102522 msecs"
(512 cubes 24x parallelism) : "Elapsed time: 6048.047696 msecs"
(512 cubes 32x parallelism) : "Elapsed time: 7748.685901 msecs"
(single fullscreen triangle  no parallelism) : "Elapsed time: 10976.947871 msecs"
(single fullscreen triangle  2x parallelism) : "Elapsed time: 5893.104811 msecs"
(single fullscreen triangle  3x parallelism) : "Elapsed time: 4689.877614 msecs"
(single fullscreen triangle  4x parallelism) : "Elapsed time: 4719.029511 msecs"
(single fullscreen triangle  6x parallelism) : "Elapsed time: 4005.109702 msecs"
(single fullscreen triangle  8x parallelism) : "Elapsed time: 3870.125964 msecs"
(single fullscreen triangle 12x parallelism) : "Elapsed time: 8568.566495 msecs"
(single fullscreen triangle 16x parallelism) : "Elapsed time: 5485.922646 msecs"
(single fullscreen triangle 24x parallelism) : "Elapsed time: 6471.357882 msecs"
(single fullscreen triangle 32x parallelism) : "Elapsed time: 14271.539813 msecs"
#+end_src
